# коллекции
# {4, 6, 8, }

s = set()  # создание пустого множества
print(s, type(s))

s = set('Hello World!')  # {'W', ' ', 'e', 'd', 'H', '!', 'r', 'o', 'l'} <class 'set'>
print(s, type(s))

s1 = {1, 2, 3}
s2 = {3, 1, 2, 3, 2}
print(s1, s2, s1 == s2)  # {1, 2, 3} {1, 2, 3} True

for element in s1:
    print(element)  # можно перебрать список элементов

print(4 not in s2)  # не существиет ли элемента в множестве

print(4 in s2)  # существет ли элемент в множистве

s2.add(5)  # добавление элемента

# remove() - удалит но если элемнет отсутвует выдаст ошибку
# discard() - удалит если элемент отсутвует ошибку не выдаст

# pop() - удаляет случайное значение и его возвращает

# A | B объеденения сетов. исходные сеты остаются без изменний
# A.union(B) объеденения сетов. исходные сеты остаются без изменний
# A.update(B) - объеденияет сетов и изменяет существующее множества
# A|=B - объеденияет сетов и изменяет существующее множества

# A&B и A.intersection(B)- получает пересечение двух сетов
# A.intersection_update(B) и A&=B

# A - B и A.difference(B) - получает набор элементов которых нет в первом сете
# A -= B и A.difference_update(B) - получает набор элементов которых нет в первом сете

# A ^ B      A.symmetric(B)  - позволяет получить значения которых нет в двух сетах
# A ^= B      A.symmetric_update(B)  - позволяет получить значения которых нет в двух сетах

# A.isdisjoin(B) - True если два множества не содержатся повторяющихся элементов

s0 = frozenset('Hello World!')
print(s0, type(s0))   # frozenset({' ', 'W', 'e', 'l', 'd', 'r', 'H', '!', 'o'}) <class 'frozenset'>









